<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from com.jlacey.electoral/xml/schema/CRM/Electoral/ScheduledJob.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:88f73086dedf26d1ca4ab0ff90b38c3c)
 */
use CRM_Electoral_ExtensionUtil as E;

/**
 * Database access object for the ScheduledJob entity.
 */
class CRM_Electoral_DAO_ScheduledJob extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_electoral_scheduled_job';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique ScheduledJob ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Description of the scheduled job
   *
   * @var string|null
   *   (SQL type: varchar(512))
   *   Note that values will be retrieved from the database as a string.
   */
  public $description;

  /**
   * Comma separated list of contact ids to re-district
   *
   * @var string|null
   *   (SQL type: text)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_ids;

  /**
   * Status of the job
   *
   * @var string|null
   *   (SQL type: varchar(10))
   *   Note that values will be retrieved from the database as a string.
   */
  public $status;

  /**
   * Status explanation of the job
   *
   * @var string|null
   *   (SQL type: varchar(512))
   *   Note that values will be retrieved from the database as a string.
   */
  public $status_message;

  /**
   * Keeps track of the index of the last contact id processed
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $offset;

  /**
   * When was the job created.
   *
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $date_created;

  /**
   * When was the job last updated.
   *
   * @var string|null
   *   (SQL type: timestamp)
   *   Note that values will be retrieved from the database as a string.
   */
  public $date_updated;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_electoral_scheduled_job';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Scheduled Jobs') : E::ts('Scheduled Job');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique ScheduledJob ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.id',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'description' => [
          'name' => 'description',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Description'),
          'description' => E::ts('Description of the scheduled job '),
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.description',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'contact_ids' => [
          'name' => 'contact_ids',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Contact Ids'),
          'description' => E::ts('Comma separated list of contact ids to re-district'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.contact_ids',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'status' => [
          'name' => 'status',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Status'),
          'description' => E::ts('Status of the job'),
          'maxlength' => 10,
          'size' => CRM_Utils_Type::TWELVE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.status',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'status_message' => [
          'name' => 'status_message',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Status Message'),
          'description' => E::ts('Status explanation of the job'),
          'maxlength' => 512,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.status_message',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'offset' => [
          'name' => 'offset',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Offset'),
          'description' => E::ts('Keeps track of the index of the last contact id processed'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.offset',
          'default' => '0',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'date_created' => [
          'name' => 'date_created',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Date Created'),
          'description' => E::ts('When was the job created.'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.date_created',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
        'date_updated' => [
          'name' => 'date_updated',
          'type' => CRM_Utils_Type::T_TIMESTAMP,
          'title' => E::ts('Date Updated'),
          'description' => E::ts('When was the job last updated.'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_electoral_scheduled_job.date_updated',
          'table_name' => 'civicrm_electoral_scheduled_job',
          'entity' => 'ScheduledJob',
          'bao' => 'CRM_Electoral_DAO_ScheduledJob',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'scheduled_job', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'scheduled_job', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
